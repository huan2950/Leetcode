#include<stdio.h>
void swap (int arr[], int i, int j)
{
	int temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
}

void heapify (int tree[],int n, int i)//从一个结点开始的堆操作 
{
	if (i >= n)
	    return; 
	int c1 = 2 * i + 1;//i的左子树 
	int c2 = 2 * i + 2;//i的右子树
	int max = i;
	if (c1 < n && tree[c1] > tree[max])
	    max = c1;
	if (c2 < n && tree[c2] > tree[max])
	    max = c2;
	if (max != i)
	{
		swap (tree, max, i);
		heapify (tree, n, max);
	}
}

void build_heap (int tree[], int n)//对整个二叉树进行堆操作 
{
	int last_node = n -1;
	int parent = (last_node - 1)/2;
	int i;
	for (i = parent; i >= 0; i--)
	    heapify (tree, n, i);
}

void heap_sort (int tree[], int n)
{
	build_heap(tree, n);
	int i;
	for (i = n - 1; i >= 0; i--)
	{
		swap(tree, i, 0);//交换第一个数和最后一个数 
		heapify(tree, i, 0);//形成新的堆 
	}
 } 
int main ()
{
	int tree[] = {2, 5, 3, 1, 10, 4};
	int n = 6;
	heap_sort(tree, n);
	
	int i;
	for (i = 0; i<n;i++)
	{
		printf("%d\n",tree[i]);
	}
	return 0;
} 
